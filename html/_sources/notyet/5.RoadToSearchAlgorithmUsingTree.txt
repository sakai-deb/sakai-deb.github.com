==================================
検索のための予備知識のメモ
==================================

:date: 2012/11/25

.. contents:: 目次
      :local:
      :depth: 2
      :backlinks: top

0. 参考
--------
* `Hackage - Data.Map <http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html>`_

1. 概要
--------

#. キーとデータの組をたくさん得たとする。キーを使ってデータを検索する効率の良い方法を考えたい。

#. 事前に特定の構造を作っておくとよい。例えば木構造。

#. 考えるべき操作として、以下は重要。
   1. lookup : あるキーからデータを検索する
   2. insert : あるキーとデータの組を追加する
   3. delete : あるキーとデータの組を取り除く

2. 愚直にやったとすると...
-----------------------------

2-1. 単純に列挙
^^^^^^^^^^^^^^^^^^^^^^^^^^^

[(Key1, Data1), (Key2, Data2), (Key3, Data3), ...] というようにただただ列挙した場合、

+--------+--------+
| 操作   | 計算量 |
+========+========+
| lookup | O(n)   |
| insert | O(1)   |
| delete | O(n)   |
+--------+--------+

| くらいになる。
| ただし、データを追加するときには、先頭に追加することにする。
| データの数が多くなればなるだけ検索が遅くなるので、非常に効率が悪いと思う。

2-2. 辞書っぽい列挙
^^^^^^^^^^^^^^^^^^^^^^^^



